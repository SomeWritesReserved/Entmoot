<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fbxer</name>
    </assembly>
    <members>
        <member name="T:UkooLabs.FbxSharpie.ErrorLevel">
            <summary>
            Indicates when a reader should throw errors
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.ErrorLevel.Permissive">
            <summary>
            Ignores inconsistencies unless the parser can no longer continue
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.ErrorLevel.Checked">
            <summary>
            Checks data integrity, such as checksums and end points
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.ErrorLevel.Strict">
            <summary>
            Checks everything, including magic bytes
            </summary>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxAsciiReader">
            <summary>
            Reads FBX nodes from a text stream
            </summary>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxAsciiReader.#ctor(System.IO.Stream,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Creates a new reader
            </summary>
            <param name="stream"></param>
            <param name="errorLevel"></param>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxAsciiReader.MaxArrayLength">
            <summary>
            The maximum array size that will be allocated
            </summary>
            <remarks>
            If you trust the source, you can expand this value as necessary.
            Malformed files could cause large amounts of memory to be allocated
            and slow or crash the system as a result.
            </remarks>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxAsciiReader.ReadNode">
            <summary>
            Reads the next node from the stream
            </summary>
            <returns>The read node, or <c>null</c></returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxAsciiReader.Read">
            <summary>
            Reads a full document from the stream
            </summary>
            <returns>The complete document object</returns>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxAsciiWriter">
            <summary>
            Writes an FBX document in a text format
            </summary>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxAsciiWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new reader
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxAsciiWriter.Write(UkooLabs.FbxSharpie.FbxDocument)">
            <summary>
            Writes an FBX document to the stream
            </summary>
            <param name="document"></param>
            <remarks>
            ASCII FBX files have no header or footer, so you can call this multiple times
            </remarks>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxBinary">
            <summary>
            Base class for binary stream wrappers
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxBinary.footerCodeSize">
            <summary>
            The size of the footer code
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxBinary.binarySeparator">
            <summary>
            The namespace separator in the binary format (remember to reverse the identifiers)
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxBinary.asciiSeparator">
            <summary>
            The namespace separator in the ASCII format and in object data
            </summary>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinary.CheckEqual(System.Byte[],System.Byte[])">
            <summary>
            Checks if the first part of 'data' matches 'original'
            </summary>
            <param name="data"></param>
            <param name="original"></param>
            <returns><c>true</c> if it does, otherwise <c>false</c></returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinary.WriteHeader(System.IO.Stream)">
            <summary>
            Writes the FBX header string
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinary.ReadHeader(System.IO.Stream)">
            <summary>
            Reads the FBX header string
            </summary>
            <param name="stream"></param>
            <returns><c>true</c> if it's compliant</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinary.GenerateFooterCode(UkooLabs.FbxSharpie.FbxNodeList)">
            <summary>
            Generates the unique footer code based on the document's timestamp
            </summary>
            <param name="document"></param>
            <returns>A 16-byte code</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinary.GenerateFooterCode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a unique footer code based on a timestamp
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="millisecond"></param>
            <returns>A 16-byte code</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinary.WriteFooter(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the FBX footer extension (NB - not the unique footer code)
            </summary>
            <param name="stream"></param>
            <param name="version"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinary.CheckFooter(System.IO.BinaryReader,UkooLabs.FbxSharpie.FbxVersion)">
            <summary>
            Reads and checks the FBX footer extension (NB - not the unique footer code)
            </summary>
            <param name="stream"></param>
            <param name="version"></param>
            <returns><c>true</c> if it's compliant</returns>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxBinaryReader">
            <summary>
            Reads FBX nodes from a binary stream
            </summary>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinaryReader.#ctor(System.IO.Stream,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Creates a new reader
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="errorLevel">When to throw an <see cref="T:UkooLabs.FbxSharpie.FbxException"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does
            not support seeking</exception>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinaryReader.ReadNode(UkooLabs.FbxSharpie.FbxDocument)">
            <summary>
            Reads a single node.
            </summary>
            <remarks>
            This won't read the file header or footer, and as such will fail if the stream is a full FBX file
            </remarks>
            <returns>The node</returns>
            <exception cref="T:UkooLabs.FbxSharpie.FbxException">The FBX data was malformed
            for the reader's error level</exception>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinaryReader.Read">
            <summary>
            Reads an FBX document from the stream
            </summary>
            <returns>The top-level node</returns>
            <exception cref="T:UkooLabs.FbxSharpie.FbxException">The FBX data was malformed
            for the reader's error level</exception>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxBinaryWriter">
            <summary>
            Writes an FBX document to a binary stream
            </summary>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxBinaryWriter.CompressionThreshold">
            <summary>
            The minimum size of an array in bytes before it is compressed
            </summary>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new writer
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxBinaryWriter.Write(UkooLabs.FbxSharpie.FbxDocument)">
            <summary>
            Writes an FBX file to the output
            </summary>
            <param name="document"></param>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxDocument">
            <summary>
            A top-level FBX node
            </summary>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxDocument.Version">
            <summary>
            Describes the format and data of the document
            </summary>
            <remarks>
            It isn't recommended that you change this value directly, because
            it won't change any of the document's data which can be version-specific.
            Most FBX importers can cope with any version.
            </remarks>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxException">
            <summary>
            An error with the FBX data input
            </summary>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxException.#ctor(System.Int64,System.String)">
            <summary>
            An error at a binary stream offset
            </summary>
            <param name="position"></param>
            <param name="message"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxException.#ctor(UkooLabs.FbxSharpie.FbxAsciiFileInfo,System.String)">
            <summary>
            An error in a text file
            </summary>
            <param name="line"></param>
            <param name="column"></param>
            <param name="message"></param>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxIO">
            <summary>
            Static read and write methods
            </summary>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.Read(System.String,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Reads a ASCII or binary FBX file
            </summary>
            <param name="path"></param>
            <returns>The top level document node</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.Read(System.IO.Stream,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Reads a ASCII or binary FBX file
            </summary>
            <param name="stream"></param>
            <returns>The top level document node</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.ReadBinary(System.String,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Reads a binary FBX file
            </summary>
            <param name="path"></param>
            <returns>The top level document node</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.ReadBinary(System.IO.Stream,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Reads a binary FBX file
            </summary>
            <param name="stream"></param>
            <returns>The top level document node</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.ReadAscii(System.String,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Reads an ASCII FBX file
            </summary>
            <param name="path"></param>
            <returns>The top level document node</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.ReadAscii(System.IO.Stream,UkooLabs.FbxSharpie.ErrorLevel)">
            <summary>
            Reads an ASCII FBX file
            </summary>
            <param name="stream"></param>
            <returns>The top level document node</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.WriteBinary(UkooLabs.FbxSharpie.FbxDocument,System.String)">
            <summary>
            Writes an FBX document
            </summary>
            <param name="document">The top level document node</param>
            <param name="path"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.WriteBinary(UkooLabs.FbxSharpie.FbxDocument,System.IO.Stream)">
            <summary>
            Writes an FBX document
            </summary>
            <param name="document">The top level document node</param>
            <param name="stream"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.WriteAscii(UkooLabs.FbxSharpie.FbxDocument,System.String)">
            <summary>
            Writes an FBX document
            </summary>
            <param name="document">The top level document node</param>
            <param name="path"></param>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxIO.WriteAscii(UkooLabs.FbxSharpie.FbxDocument,System.IO.Stream)">
            <summary>
            Writes an FBX document
            </summary>
            <param name="document">The top level document node</param>
            <param name="stream"></param>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxNode">
            <summary>
            Represents a node in an FBX file
            </summary>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxNode.Identifier">
            <summary>
            The node name, which is often a class type
            </summary>
            <remarks>
            The name must be smaller than 256 characters to be written to a binary stream
            </remarks>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxNode.Properties">
            <summary>
            The list of properties associated with the node
            </summary>
            <remarks>
            Supported types are primitives (apart from byte and char),arrays of primitives, and strings
            </remarks>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxNode.Value">
            <summary>
            The first property element
            </summary>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxNode.IsEmpty">
            <summary>
            Whether the node is empty of data
            </summary>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxNodeList">
            <summary>
            Base class for nodes and documents
            </summary>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxNodeList.Nodes">
            <summary>
            The list of child/nested nodes
            </summary>
            <remarks>
            A list with one or more null elements is treated differently than an empty list,
            and represented differently in all FBX output files.
            </remarks>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxNodeList.AddNode(UkooLabs.FbxSharpie.FbxNode)">
            <summary>
            Add node to node array
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:UkooLabs.FbxSharpie.FbxNodeList.Item(System.String)">
            <summary>
            Gets a named child node
            </summary>
            <param name="name"></param>
            <returns>The child node, or null</returns>
        </member>
        <member name="M:UkooLabs.FbxSharpie.FbxNodeList.GetRelative(System.String)">
            <summary>
            Gets a child node, using a '/' separated path
            </summary>
            <param name="path"></param>
            <returns>The child node, or null</returns>
        </member>
        <member name="T:UkooLabs.FbxSharpie.FbxVersion">
            <summary>
            Enumerates the FBX file versions
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v6_0">
            <summary>
            FBX version 6.0
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v6_1">
            <summary>
            FBX version 6.1
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v7_0">
            <summary>
            FBX version 7.0
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v7_1">
            <summary>
            FBX 2011 version
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v7_2">
            <summary>
            FBX 2012 version
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v7_3">
            <summary>
            FBX 2013 version
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v7_4">
            <summary>
            FBX 2014-15 version
            </summary>
        </member>
        <member name="F:UkooLabs.FbxSharpie.FbxVersion.v7_5">
            <summary>
            FBX 2016-19 version, adds large file (>2GB support), not compatible with older versions
            </summary>
        </member>
        <member name="P:UkooLabs.FbxSharpie.Settings.MaxLineLength">
            <summary>
            The maximum line length in characters when outputting arrays
            </summary>
            <remarks>
            Lines might end up being a few characters longer than this, visibly and otherwise,
            so don't rely on it as a hard limit in code!
            </remarks>
        </member>
    </members>
</doc>
